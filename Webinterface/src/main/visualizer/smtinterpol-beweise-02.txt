Trivialer Beweis - ohne "@res"!

(@clause (@asserted false) (! false :input))

--------------------------------------------------------------------------------

Beweis mit Literalen ohne ":quoted"

Proof text:

(@res (@clause (@asserted (not p)) (! (not p) :input)) (! (@clause (@asserted p) (! p :input)) :pivot p))

Structured:

(@res
	(@clause (@asserted (not p)) (! (not p) :input))
	(! (@clause (@asserted p) (! p :input))
	:pivot p))

--------------------------------------------------------------------------------

Beweis mit weiterer Art von Literalen und weiterer Art von Lemmas (nicht ":CC", aber immer gleicher Aufbau)

Proof text:

(@res (@clause (@asserted (! (<= (+ b (- a) 1) 0) :quotedLA)) (! (! (<= (+ b (- a) 1) 0) :quotedLA) :input)) (! (@res (@lemma (! (or (! (<= (+ b (- a)) 0) :quotedLA) (not (! (<= (+ b (- a) 1) 0) :quotedLA))) :LA ((- 1) 1))) (! (@clause (@asserted (not (! (<= (+ b (- a)) 0) :quotedLA))) (! (not (! (<= (+ b (- a)) 0) :quotedLA)) :input)) :pivot (not (! (<= (+ b (- a)) 0) :quotedLA)))) :pivot (not (! (<= (+ b (- a) 1) 0) :quotedLA))))

Structured:

(@res
	(@clause (@asserted (! (<= (+ b (- a) 1) 0) :quotedLA)) (! (! (<= (+ b (- a) 1) 0) :quotedLA) :input))
	(! (@res
		(@lemma (! (or (! (<= (+ b (- a)) 0) :quotedLA) (not (! (<= (+ b (- a) 1) 0) :quotedLA))) :LA ((- 1) 1)))
		(! (@clause (@asserted (not (! (<= (+ b (- a)) 0) :quotedLA))) (! (not (! (<= (+ b (- a)) 0) :quotedLA)) :input))
		:pivot (not (! (<= (+ b (- a)) 0) :quotedLA))))
	:pivot (not (! (<= (+ b (- a) 1) 0) :quotedLA))))
	
--------------------------------------------------------------------------------

Beweis mit "@clause" mit "or", sowie mit tiefer verschachtelten "@res"

Proof text:

(@res (@clause (@asserted (or (not (! (= a c) :quotedCC)) p)) (! (or (not (! (= a c) :quotedCC)) p) :input right)) (! (@res (@lemma (! (or (! (= a c) :quotedCC) (not (! (= a b) :quotedCC)) (not (! (= b c) :quotedCC))) :CC ((! (= a c) :quotedCC) :subpath (a b c)))) (! (@clause (@asserted (! (= b c) :quotedCC)) (! (! (= b c) :quotedCC) :input right)) :pivot (! (= b c) :quotedCC)) (! (@clause (@asserted (! (= a b) :quotedCC)) (! (! (= a b) :quotedCC) :input left)) :pivot (! (= a b) :quotedCC))) :pivot (! (= a c) :quotedCC)) (! (@res (@clause (@asserted (or (not (! (= a c) :quotedCC)) (not p))) (! (or (not (! (= a c) :quotedCC)) (not p)) :input left)) (! (@res (@lemma (! (or (! (= a c) :quotedCC) (not (! (= a b) :quotedCC)) (not (! (= b c) :quotedCC))) :CC ((! (= a c) :quotedCC) :subpath (a b c)))) (! (@clause (@asserted (! (= b c) :quotedCC)) (! (! (= b c) :quotedCC) :input right)) :pivot (! (= b c) :quotedCC)) (! (@clause (@asserted (! (= a b) :quotedCC)) (! (! (= a b) :quotedCC) :input left)) :pivot (! (= a b) :quotedCC))) :pivot (! (= a c) :quotedCC))) :pivot (not p)))

Structured:

(@res
	(@clause (@asserted (or (not (! (= a c) :quotedCC)) p)) (! (or (not (! (= a c) :quotedCC)) p) :input right))
	(! (@res
		(@lemma (! (or (! (= a c) :quotedCC) (not (! (= a b) :quotedCC)) (not (! (= b c) :quotedCC))) :CC ((! (= a c) :quotedCC) :subpath (a b c))))
		(! (@clause (@asserted (! (= b c) :quotedCC)) (! (! (= b c) :quotedCC) :input right))
		:pivot (! (= b c) :quotedCC))
		(! (@clause (@asserted (! (= a b) :quotedCC)) (! (! (= a b) :quotedCC) :input left))
		:pivot (! (= a b) :quotedCC)))
	:pivot (! (= a c) :quotedCC))
	(! (@res
		(@clause (@asserted (or (not (! (= a c) :quotedCC)) (not p))) (! (or (not (! (= a c) :quotedCC)) (not p)) :input left))
		(! (@res
			(@lemma (! (or (! (= a c) :quotedCC) (not (! (= a b) :quotedCC)) (not (! (= b c) :quotedCC))) :CC ((! (= a c) :quotedCC) :subpath (a b c))))
			(! (@clause (@asserted (! (= b c) :quotedCC)) (! (! (= b c) :quotedCC) :input right))
			:pivot (! (= b c) :quotedCC))
			(! (@clause (@asserted (! (= a b) :quotedCC)) (! (! (= a b) :quotedCC) :input left))
			:pivot (! (= a b) :quotedCC)))
		:pivot (! (= a c) :quotedCC)))
	:pivot (not p)))
	
--------------------------------------------------------------------------------

Langer Beweis (auch ausfÃ¼hrliches Format)

Proof text:

(@res (@lemma (! (or (! (= (select a i) (select b j)) :quotedCC) (not (! (= i j) :quotedCC)) (not (! (= b (store s2 k3 v3)) :quotedCC)) (! (= j k3) :quotedCC) (! (= j k2) :quotedCC) (not (! (= s1 (store s2 k2 v2)) :quotedCC)) (! (= j k1) :quotedCC) (not (! (= a (store s1 k1 v1)) :quotedCC))) :read-over-weakeq ((! (= (select a i) (select b j)) :quotedCC) :weakpath (j (b (store s2 k3 v3) s2 (store s2 k2 v2) s1 (store s1 k1 v1) a))))) (! (@res (@lemma (! (or (! (= i k1) :quotedCC) (not (! (= i j) :quotedCC)) (not (! (= j k1) :quotedCC))) :CC ((! (= i k1) :quotedCC) :subpath (i j k1)))) (! (@clause (@mp (@split (! (@mp (@asserted (! (and (not (= i k1)) (and (not (= i k2)) (= s1 (store s2 k2 v2)))) :named A)) (@trans (@rewrite (! (= (! (and (not (= i k1)) (and (not (= i k2)) (= s1 (store s2 k2 v2)))) :named A) (and (not (= i k1)) (and (not (= i k2)) (= s1 (store s2 k2 v2))))) :strip)) (@cong (@trans (@cong (@refl (and (not (= i k1)) (and (not (= i k2)) (= s1 (store s2 k2 v2))))) (@cong (@rewrite (! (= (and (not (= i k2)) (= s1 (store s2 k2 v2))) (not (or (not (not (= i k2))) (not (= s1 (store s2 k2 v2)))))) :andToOr)) (@cong (@refl (or (not (not (= i k2))) (not (= s1 (store s2 k2 v2))))) (@rewrite (! (= (not (not (= i k2))) (= i k2)) :notSimp))))) (@rewrite (! (= (and (not (= i k1)) (not (or (= i k2) (not (= s1 (store s2 k2 v2)))))) (not (or (not (not (= i k1))) (not (not (or (= i k2) (not (= s1 (store s2 k2 v2))))))))) :andToOr))) (@cong (@refl (or (not (not (= i k1))) (not (not (or (= i k2) (not (= s1 (store s2 k2 v2)))))))) (@rewrite (! (= (not (not (= i k1))) (= i k1)) :notSimp)) (@rewrite (! (= (not (not (or (= i k2) (not (= s1 (store s2 k2 v2)))))) (or (= i k2) (not (= s1 (store s2 k2 v2))))) :notSimp)))))) :notOr) (not (= i k1))) (@cong (@refl (not (= i k1))) (@rewrite (! (= (= i k1) (! (= i k1) :quotedCC)) :intern)))) (! (not (! (= i k1) :quotedCC)) :input A)) :pivot (not (! (= i k1) :quotedCC))) (! (@clause (@mp (@mp (@split (! (@split (! (@split (! (@split (! (@mp (@asserted (! (and (not (= i k3)) (and (= a (store s1 k1 v1)) (and (= b (store s2 k3 v3)) (and (= i j) (not (= (select a i) (select b j))))))) :named B)) (@trans (@rewrite (! (= (! (and (not (= i k3)) (and (= a (store s1 k1 v1)) (and (= b (store s2 k3 v3)) (and (= i j) (not (= (select a i) (select b j))))))) :named B) (and (not (= i k3)) (and (= a (store s1 k1 v1)) (and (= b (store s2 k3 v3)) (and (= i j) (not (= (select a i) (select b j)))))))) :strip)) (@cong (@trans (@cong (@refl (and (not (= i k3)) (and (= a (store s1 k1 v1)) (and (= b (store s2 k3 v3)) (and (= i j) (not (= (select a i) (select b j)))))))) (@cong (@trans (@cong (@refl (and (= a (store s1 k1 v1)) (and (= b (store s2 k3 v3)) (and (= i j) (not (= (select a i) (select b j))))))) (@cong (@trans (@cong (@refl (and (= b (store s2 k3 v3)) (and (= i j) (not (= (select a i) (select b j)))))) (@cong (@rewrite (! (= (and (= i j) (not (= (select a i) (select b j)))) (not (or (not (= i j)) (not (not (= (select a i) (select b j))))))) :andToOr)) (@cong (@refl (or (not (= i j)) (not (not (= (select a i) (select b j)))))) (@rewrite (! (= (not (not (= (select a i) (select b j)))) (= (select a i) (select b j))) :notSimp))))) (@rewrite (! (= (and (= b (store s2 k3 v3)) (not (or (not (= i j)) (= (select a i) (select b j))))) (not (or (not (= b (store s2 k3 v3))) (not (not (or (not (= i j)) (= (select a i) (select b j)))))))) :andToOr))) (@cong (@refl (or (not (= b (store s2 k3 v3))) (not (not (or (not (= i j)) (= (select a i) (select b j))))))) (@rewrite (! (= (not (not (or (not (= i j)) (= (select a i) (select b j))))) (or (not (= i j)) (= (select a i) (select b j)))) :notSimp))))) (@rewrite (! (= (and (= a (store s1 k1 v1)) (not (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j)))))) (not (or (not (= a (store s1 k1 v1))) (not (not (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j))))))))) :andToOr))) (@cong (@refl (or (not (= a (store s1 k1 v1))) (not (not (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j)))))))) (@rewrite (! (= (not (not (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j)))))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j))))) :notSimp))))) (@rewrite (! (= (and (not (= i k3)) (not (or (not (= a (store s1 k1 v1))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j))))))) (not (or (not (not (= i k3))) (not (not (or (not (= a (store s1 k1 v1))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j)))))))))) :andToOr))) (@cong (@refl (or (not (not (= i k3))) (not (not (or (not (= a (store s1 k1 v1))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j))))))))) (@rewrite (! (= (not (not (= i k3))) (= i k3)) :notSimp)) (@rewrite (! (= (not (not (or (not (= a (store s1 k1 v1))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j))))))) (or (not (= a (store s1 k1 v1))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j)))))) :notSimp)))))) :notOr) (not (or (not (= a (store s1 k1 v1))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j))))))) :notOr) (not (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j)))))) :notOr) (not (or (not (= i j)) (= (select a i) (select b j))))) :notOr) (not (not (= i j)))) (@rewrite (! (= (not (not (= i j))) (= i j)) :notSimp))) (@rewrite (! (= (= i j) (! (= i j) :quotedCC)) :intern))) (! (! (= i j) :quotedCC) :input B)) :pivot (! (= i j) :quotedCC))) :pivot (not (! (= j k1) :quotedCC))) (! (@clause (@mp (@mp (@split (! (@split (! (@split (! (@mp (@asserted (! (and (not (= i k3)) (and (= a (store s1 k1 v1)) (and (= b (store s2 k3 v3)) (and (= i j) (not (= (select a i) (select b j))))))) :named B)) (@trans (@rewrite (! (= (! (and (not (= i k3)) (and (= a (store s1 k1 v1)) (and (= b (store s2 k3 v3)) (and (= i j) (not (= (select a i) (select b j))))))) :named B) (and (not (= i k3)) (and (= a (store s1 k1 v1)) (and (= b (store s2 k3 v3)) (and (= i j) (not (= (select a i) (select b j)))))))) :strip)) (@cong (@trans (@cong (@refl (and (not (= i k3)) (and (= a (store s1 k1 v1)) (and (= b (store s2 k3 v3)) (and (= i j) (not (= (select a i) (select b j)))))))) (@cong (@trans (@cong (@refl (and (= a (store s1 k1 v1)) (and (= b (store s2 k3 v3)) (and (= i j) (not (= (select a i) (select b j))))))) (@cong (@trans (@cong (@refl (and (= b (store s2 k3 v3)) (and (= i j) (not (= (select a i) (select b j)))))) (@cong (@rewrite (! (= (and (= i j) (not (= (select a i) (select b j)))) (not (or (not (= i j)) (not (not (= (select a i) (select b j))))))) :andToOr)) (@cong (@refl (or (not (= i j)) (not (not (= (select a i) (select b j)))))) (@rewrite (! (= (not (not (= (select a i) (select b j)))) (= (select a i) (select b j))) :notSimp))))) (@rewrite (! (= (and (= b (store s2 k3 v3)) (not (or (not (= i j)) (= (select a i) (select b j))))) (not (or (not (= b (store s2 k3 v3))) (not (not (or (not (= i j)) (= (select a i) (select b j)))))))) :andToOr))) (@cong (@refl (or (not (= b (store s2 k3 v3))) (not (not (or (not (= i j)) (= (select a i) (select b j))))))) (@rewrite (! (= (not (not (or (not (= i j)) (= (select a i) (select b j))))) (or (not (= i j)) (= (select a i) (select b j)))) :notSimp))))) (@rewrite (! (= (and (= a (store s1 k1 v1)) (not (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j)))))) (not (or (not (= a (store s1 k1 v1))) (not (not (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j))))))))) :andToOr))) (@cong (@refl (or (not (= a (store s1 k1 v1))) (not (not (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j)))))))) (@rewrite (! (= (not (not (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j)))))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j))))) :notSimp))))) (@rewrite (! (= (and (not (= i k3)) (not (or (not (= a (store s1 k1 v1))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j))))))) (not (or (not (not (= i k3))) (not (not (or (not (= a (store s1 k1 v1))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j)))))))))) :andToOr))) (@cong (@refl (or (not (not (= i k3))) (not (not (or (not (= a (store s1 k1 v1))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j))))))))) (@rewrite (! (= (not (not (= i k3))) (= i k3)) :notSimp)) (@rewrite (! (= (not (not (or (not (= a (store s1 k1 v1))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j))))))) (or (not (= a (store s1 k1 v1))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j)))))) :notSimp)))))) :notOr) (not (or (not (= a (store s1 k1 v1))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j))))))) :notOr) (not (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j)))))) :notOr) (not (not (= b (store s2 k3 v3))))) (@rewrite (! (= (not (not (= b (store s2 k3 v3)))) (= b (store s2 k3 v3))) :notSimp))) (@rewrite (! (= (= b (store s2 k3 v3)) (! (= b (store s2 k3 v3)) :quotedCC)) :intern))) (! (! (= b (store s2 k3 v3)) :quotedCC) :input B)) :pivot (! (= b (store s2 k3 v3)) :quotedCC)) (! (@clause (@mp (@mp (@split (! (@split (! (@mp (@asserted (! (and (not (= i k3)) (and (= a (store s1 k1 v1)) (and (= b (store s2 k3 v3)) (and (= i j) (not (= (select a i) (select b j))))))) :named B)) (@trans (@rewrite (! (= (! (and (not (= i k3)) (and (= a (store s1 k1 v1)) (and (= b (store s2 k3 v3)) (and (= i j) (not (= (select a i) (select b j))))))) :named B) (and (not (= i k3)) (and (= a (store s1 k1 v1)) (and (= b (store s2 k3 v3)) (and (= i j) (not (= (select a i) (select b j)))))))) :strip)) (@cong (@trans (@cong (@refl (and (not (= i k3)) (and (= a (store s1 k1 v1)) (and (= b (store s2 k3 v3)) (and (= i j) (not (= (select a i) (select b j)))))))) (@cong (@trans (@cong (@refl (and (= a (store s1 k1 v1)) (and (= b (store s2 k3 v3)) (and (= i j) (not (= (select a i) (select b j))))))) (@cong (@trans (@cong (@refl (and (= b (store s2 k3 v3)) (and (= i j) (not (= (select a i) (select b j)))))) (@cong (@rewrite (! (= (and (= i j) (not (= (select a i) (select b j)))) (not (or (not (= i j)) (not (not (= (select a i) (select b j))))))) :andToOr)) (@cong (@refl (or (not (= i j)) (not (not (= (select a i) (select b j)))))) (@rewrite (! (= (not (not (= (select a i) (select b j)))) (= (select a i) (select b j))) :notSimp))))) (@rewrite (! (= (and (= b (store s2 k3 v3)) (not (or (not (= i j)) (= (select a i) (select b j))))) (not (or (not (= b (store s2 k3 v3))) (not (not (or (not (= i j)) (= (select a i) (select b j)))))))) :andToOr))) (@cong (@refl (or (not (= b (store s2 k3 v3))) (not (not (or (not (= i j)) (= (select a i) (select b j))))))) (@rewrite (! (= (not (not (or (not (= i j)) (= (select a i) (select b j))))) (or (not (= i j)) (= (select a i) (select b j)))) :notSimp))))) (@rewrite (! (= (and (= a (store s1 k1 v1)) (not (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j)))))) (not (or (not (= a (store s1 k1 v1))) (not (not (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j))))))))) :andToOr))) (@cong (@refl (or (not (= a (store s1 k1 v1))) (not (not (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j)))))))) (@rewrite (! (= (not (not (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j)))))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j))))) :notSimp))))) (@rewrite (! (= (and (not (= i k3)) (not (or (not (= a (store s1 k1 v1))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j))))))) (not (or (not (not (= i k3))) (not (not (or (not (= a (store s1 k1 v1))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j)))))))))) :andToOr))) (@cong (@refl (or (not (not (= i k3))) (not (not (or (not (= a (store s1 k1 v1))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j))))))))) (@rewrite (! (= (not (not (= i k3))) (= i k3)) :notSimp)) (@rewrite (! (= (not (not (or (not (= a (store s1 k1 v1))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j))))))) (or (not (= a (store s1 k1 v1))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j)))))) :notSimp)))))) :notOr) (not (or (not (= a (store s1 k1 v1))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j))))))) :notOr) (not (not (= a (store s1 k1 v1))))) (@rewrite (! (= (not (not (= a (store s1 k1 v1)))) (= a (store s1 k1 v1))) :notSimp))) (@rewrite (! (= (= a (store s1 k1 v1)) (! (= a (store s1 k1 v1)) :quotedCC)) :intern))) (! (! (= a (store s1 k1 v1)) :quotedCC) :input B)) :pivot (! (= a (store s1 k1 v1)) :quotedCC)) (! (@res (@lemma (! (or (! (= i k2) :quotedCC) (not (! (= i j) :quotedCC)) (not (! (= j k2) :quotedCC))) :CC ((! (= i k2) :quotedCC) :subpath (i j k2)))) (! (@clause (@mp (@split (! (@split (! (@mp (@asserted (! (and (not (= i k1)) (and (not (= i k2)) (= s1 (store s2 k2 v2)))) :named A)) (@trans (@rewrite (! (= (! (and (not (= i k1)) (and (not (= i k2)) (= s1 (store s2 k2 v2)))) :named A) (and (not (= i k1)) (and (not (= i k2)) (= s1 (store s2 k2 v2))))) :strip)) (@cong (@trans (@cong (@refl (and (not (= i k1)) (and (not (= i k2)) (= s1 (store s2 k2 v2))))) (@cong (@rewrite (! (= (and (not (= i k2)) (= s1 (store s2 k2 v2))) (not (or (not (not (= i k2))) (not (= s1 (store s2 k2 v2)))))) :andToOr)) (@cong (@refl (or (not (not (= i k2))) (not (= s1 (store s2 k2 v2))))) (@rewrite (! (= (not (not (= i k2))) (= i k2)) :notSimp))))) (@rewrite (! (= (and (not (= i k1)) (not (or (= i k2) (not (= s1 (store s2 k2 v2)))))) (not (or (not (not (= i k1))) (not (not (or (= i k2) (not (= s1 (store s2 k2 v2))))))))) :andToOr))) (@cong (@refl (or (not (not (= i k1))) (not (not (or (= i k2) (not (= s1 (store s2 k2 v2)))))))) (@rewrite (! (= (not (not (= i k1))) (= i k1)) :notSimp)) (@rewrite (! (= (not (not (or (= i k2) (not (= s1 (store s2 k2 v2)))))) (or (= i k2) (not (= s1 (store s2 k2 v2))))) :notSimp)))))) :notOr) (not (or (= i k2) (not (= s1 (store s2 k2 v2)))))) :notOr) (not (= i k2))) (@cong (@refl (not (= i k2))) (@rewrite (! (= (= i k2) (! (= i k2) :quotedCC)) :intern)))) (! (not (! (= i k2) :quotedCC)) :input A)) :pivot (not (! (= i k2) :quotedCC))) (! (@clause (@mp (@mp (@split (! (@split (! (@split (! (@split (! (@mp (@asserted (! (and (not (= i k3)) (and (= a (store s1 k1 v1)) (and (= b (store s2 k3 v3)) (and (= i j) (not (= (select a i) (select b j))))))) :named B)) (@trans (@rewrite (! (= (! (and (not (= i k3)) (and (= a (store s1 k1 v1)) (and (= b (store s2 k3 v3)) (and (= i j) (not (= (select a i) (select b j))))))) :named B) (and (not (= i k3)) (and (= a (store s1 k1 v1)) (and (= b (store s2 k3 v3)) (and (= i j) (not (= (select a i) (select b j)))))))) :strip)) (@cong (@trans (@cong (@refl (and (not (= i k3)) (and (= a (store s1 k1 v1)) (and (= b (store s2 k3 v3)) (and (= i j) (not (= (select a i) (select b j)))))))) (@cong (@trans (@cong (@refl (and (= a (store s1 k1 v1)) (and (= b (store s2 k3 v3)) (and (= i j) (not (= (select a i) (select b j))))))) (@cong (@trans (@cong (@refl (and (= b (store s2 k3 v3)) (and (= i j) (not (= (select a i) (select b j)))))) (@cong (@rewrite (! (= (and (= i j) (not (= (select a i) (select b j)))) (not (or (not (= i j)) (not (not (= (select a i) (select b j))))))) :andToOr)) (@cong (@refl (or (not (= i j)) (not (not (= (select a i) (select b j)))))) (@rewrite (! (= (not (not (= (select a i) (select b j)))) (= (select a i) (select b j))) :notSimp))))) (@rewrite (! (= (and (= b (store s2 k3 v3)) (not (or (not (= i j)) (= (select a i) (select b j))))) (not (or (not (= b (store s2 k3 v3))) (not (not (or (not (= i j)) (= (select a i) (select b j)))))))) :andToOr))) (@cong (@refl (or (not (= b (store s2 k3 v3))) (not (not (or (not (= i j)) (= (select a i) (select b j))))))) (@rewrite (! (= (not (not (or (not (= i j)) (= (select a i) (select b j))))) (or (not (= i j)) (= (select a i) (select b j)))) :notSimp))))) (@rewrite (! (= (and (= a (store s1 k1 v1)) (not (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j)))))) (not (or (not (= a (store s1 k1 v1))) (not (not (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j))))))))) :andToOr))) (@cong (@refl (or (not (= a (store s1 k1 v1))) (not (not (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j)))))))) (@rewrite (! (= (not (not (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j)))))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j))))) :notSimp))))) (@rewrite (! (= (and (not (= i k3)) (not (or (not (= a (store s1 k1 v1))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j))))))) (not (or (not (not (= i k3))) (not (not (or (not (= a (store s1 k1 v1))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j)))))))))) :andToOr))) (@cong (@refl (or (not (not (= i k3))) (not (not (or (not (= a (store s1 k1 v1))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j))))))))) (@rewrite (! (= (not (not (= i k3))) (= i k3)) :notSimp)) (@rewrite (! (= (not (not (or (not (= a (store s1 k1 v1))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j))))))) (or (not (= a (store s1 k1 v1))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j)))))) :notSimp)))))) :notOr) (not (or (not (= a (store s1 k1 v1))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j))))))) :notOr) (not (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j)))))) :notOr) (not (or (not (= i j)) (= (select a i) (select b j))))) :notOr) (not (not (= i j)))) (@rewrite (! (= (not (not (= i j))) (= i j)) :notSimp))) (@rewrite (! (= (= i j) (! (= i j) :quotedCC)) :intern))) (! (! (= i j) :quotedCC) :input B)) :pivot (! (= i j) :quotedCC))) :pivot (not (! (= j k2) :quotedCC))) (! (@clause (@mp (@mp (@split (! (@split (! (@mp (@asserted (! (and (not (= i k1)) (and (not (= i k2)) (= s1 (store s2 k2 v2)))) :named A)) (@trans (@rewrite (! (= (! (and (not (= i k1)) (and (not (= i k2)) (= s1 (store s2 k2 v2)))) :named A) (and (not (= i k1)) (and (not (= i k2)) (= s1 (store s2 k2 v2))))) :strip)) (@cong (@trans (@cong (@refl (and (not (= i k1)) (and (not (= i k2)) (= s1 (store s2 k2 v2))))) (@cong (@rewrite (! (= (and (not (= i k2)) (= s1 (store s2 k2 v2))) (not (or (not (not (= i k2))) (not (= s1 (store s2 k2 v2)))))) :andToOr)) (@cong (@refl (or (not (not (= i k2))) (not (= s1 (store s2 k2 v2))))) (@rewrite (! (= (not (not (= i k2))) (= i k2)) :notSimp))))) (@rewrite (! (= (and (not (= i k1)) (not (or (= i k2) (not (= s1 (store s2 k2 v2)))))) (not (or (not (not (= i k1))) (not (not (or (= i k2) (not (= s1 (store s2 k2 v2))))))))) :andToOr))) (@cong (@refl (or (not (not (= i k1))) (not (not (or (= i k2) (not (= s1 (store s2 k2 v2)))))))) (@rewrite (! (= (not (not (= i k1))) (= i k1)) :notSimp)) (@rewrite (! (= (not (not (or (= i k2) (not (= s1 (store s2 k2 v2)))))) (or (= i k2) (not (= s1 (store s2 k2 v2))))) :notSimp)))))) :notOr) (not (or (= i k2) (not (= s1 (store s2 k2 v2)))))) :notOr) (not (not (= s1 (store s2 k2 v2))))) (@rewrite (! (= (not (not (= s1 (store s2 k2 v2)))) (= s1 (store s2 k2 v2))) :notSimp))) (@rewrite (! (= (= s1 (store s2 k2 v2)) (! (= s1 (store s2 k2 v2)) :quotedCC)) :intern))) (! (! (= s1 (store s2 k2 v2)) :quotedCC) :input A)) :pivot (! (= s1 (store s2 k2 v2)) :quotedCC)) (! (@clause (@mp (@mp (@split (! (@split (! (@split (! (@split (! (@mp (@asserted (! (and (not (= i k3)) (and (= a (store s1 k1 v1)) (and (= b (store s2 k3 v3)) (and (= i j) (not (= (select a i) (select b j))))))) :named B)) (@trans (@rewrite (! (= (! (and (not (= i k3)) (and (= a (store s1 k1 v1)) (and (= b (store s2 k3 v3)) (and (= i j) (not (= (select a i) (select b j))))))) :named B) (and (not (= i k3)) (and (= a (store s1 k1 v1)) (and (= b (store s2 k3 v3)) (and (= i j) (not (= (select a i) (select b j)))))))) :strip)) (@cong (@trans (@cong (@refl (and (not (= i k3)) (and (= a (store s1 k1 v1)) (and (= b (store s2 k3 v3)) (and (= i j) (not (= (select a i) (select b j)))))))) (@cong (@trans (@cong (@refl (and (= a (store s1 k1 v1)) (and (= b (store s2 k3 v3)) (and (= i j) (not (= (select a i) (select b j))))))) (@cong (@trans (@cong (@refl (and (= b (store s2 k3 v3)) (and (= i j) (not (= (select a i) (select b j)))))) (@cong (@rewrite (! (= (and (= i j) (not (= (select a i) (select b j)))) (not (or (not (= i j)) (not (not (= (select a i) (select b j))))))) :andToOr)) (@cong (@refl (or (not (= i j)) (not (not (= (select a i) (select b j)))))) (@rewrite (! (= (not (not (= (select a i) (select b j)))) (= (select a i) (select b j))) :notSimp))))) (@rewrite (! (= (and (= b (store s2 k3 v3)) (not (or (not (= i j)) (= (select a i) (select b j))))) (not (or (not (= b (store s2 k3 v3))) (not (not (or (not (= i j)) (= (select a i) (select b j)))))))) :andToOr))) (@cong (@refl (or (not (= b (store s2 k3 v3))) (not (not (or (not (= i j)) (= (select a i) (select b j))))))) (@rewrite (! (= (not (not (or (not (= i j)) (= (select a i) (select b j))))) (or (not (= i j)) (= (select a i) (select b j)))) :notSimp))))) (@rewrite (! (= (and (= a (store s1 k1 v1)) (not (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j)))))) (not (or (not (= a (store s1 k1 v1))) (not (not (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j))))))))) :andToOr))) (@cong (@refl (or (not (= a (store s1 k1 v1))) (not (not (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j)))))))) (@rewrite (! (= (not (not (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j)))))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j))))) :notSimp))))) (@rewrite (! (= (and (not (= i k3)) (not (or (not (= a (store s1 k1 v1))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j))))))) (not (or (not (not (= i k3))) (not (not (or (not (= a (store s1 k1 v1))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j)))))))))) :andToOr))) (@cong (@refl (or (not (not (= i k3))) (not (not (or (not (= a (store s1 k1 v1))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j))))))))) (@rewrite (! (= (not (not (= i k3))) (= i k3)) :notSimp)) (@rewrite (! (= (not (not (or (not (= a (store s1 k1 v1))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j))))))) (or (not (= a (store s1 k1 v1))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j)))))) :notSimp)))))) :notOr) (not (or (not (= a (store s1 k1 v1))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j))))))) :notOr) (not (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j)))))) :notOr) (not (or (not (= i j)) (= (select a i) (select b j))))) :notOr) (not (not (= i j)))) (@rewrite (! (= (not (not (= i j))) (= i j)) :notSimp))) (@rewrite (! (= (= i j) (! (= i j) :quotedCC)) :intern))) (! (! (= i j) :quotedCC) :input B)) :pivot (! (= i j) :quotedCC)) (! (@res (@lemma (! (or (! (= i k3) :quotedCC) (not (! (= i j) :quotedCC)) (not (! (= j k3) :quotedCC))) :CC ((! (= i k3) :quotedCC) :subpath (i j k3)))) (! (@clause (@mp (@split (! (@mp (@asserted (! (and (not (= i k3)) (and (= a (store s1 k1 v1)) (and (= b (store s2 k3 v3)) (and (= i j) (not (= (select a i) (select b j))))))) :named B)) (@trans (@rewrite (! (= (! (and (not (= i k3)) (and (= a (store s1 k1 v1)) (and (= b (store s2 k3 v3)) (and (= i j) (not (= (select a i) (select b j))))))) :named B) (and (not (= i k3)) (and (= a (store s1 k1 v1)) (and (= b (store s2 k3 v3)) (and (= i j) (not (= (select a i) (select b j)))))))) :strip)) (@cong (@trans (@cong (@refl (and (not (= i k3)) (and (= a (store s1 k1 v1)) (and (= b (store s2 k3 v3)) (and (= i j) (not (= (select a i) (select b j)))))))) (@cong (@trans (@cong (@refl (and (= a (store s1 k1 v1)) (and (= b (store s2 k3 v3)) (and (= i j) (not (= (select a i) (select b j))))))) (@cong (@trans (@cong (@refl (and (= b (store s2 k3 v3)) (and (= i j) (not (= (select a i) (select b j)))))) (@cong (@rewrite (! (= (and (= i j) (not (= (select a i) (select b j)))) (not (or (not (= i j)) (not (not (= (select a i) (select b j))))))) :andToOr)) (@cong (@refl (or (not (= i j)) (not (not (= (select a i) (select b j)))))) (@rewrite (! (= (not (not (= (select a i) (select b j)))) (= (select a i) (select b j))) :notSimp))))) (@rewrite (! (= (and (= b (store s2 k3 v3)) (not (or (not (= i j)) (= (select a i) (select b j))))) (not (or (not (= b (store s2 k3 v3))) (not (not (or (not (= i j)) (= (select a i) (select b j)))))))) :andToOr))) (@cong (@refl (or (not (= b (store s2 k3 v3))) (not (not (or (not (= i j)) (= (select a i) (select b j))))))) (@rewrite (! (= (not (not (or (not (= i j)) (= (select a i) (select b j))))) (or (not (= i j)) (= (select a i) (select b j)))) :notSimp))))) (@rewrite (! (= (and (= a (store s1 k1 v1)) (not (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j)))))) (not (or (not (= a (store s1 k1 v1))) (not (not (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j))))))))) :andToOr))) (@cong (@refl (or (not (= a (store s1 k1 v1))) (not (not (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j)))))))) (@rewrite (! (= (not (not (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j)))))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j))))) :notSimp))))) (@rewrite (! (= (and (not (= i k3)) (not (or (not (= a (store s1 k1 v1))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j))))))) (not (or (not (not (= i k3))) (not (not (or (not (= a (store s1 k1 v1))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j)))))))))) :andToOr))) (@cong (@refl (or (not (not (= i k3))) (not (not (or (not (= a (store s1 k1 v1))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j))))))))) (@rewrite (! (= (not (not (= i k3))) (= i k3)) :notSimp)) (@rewrite (! (= (not (not (or (not (= a (store s1 k1 v1))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j))))))) (or (not (= a (store s1 k1 v1))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j)))))) :notSimp)))))) :notOr) (not (= i k3))) (@cong (@refl (not (= i k3))) (@rewrite (! (= (= i k3) (! (= i k3) :quotedCC)) :intern)))) (! (not (! (= i k3) :quotedCC)) :input B)) :pivot (not (! (= i k3) :quotedCC))) (! (@clause (@mp (@mp (@split (! (@split (! (@split (! (@split (! (@mp (@asserted (! (and (not (= i k3)) (and (= a (store s1 k1 v1)) (and (= b (store s2 k3 v3)) (and (= i j) (not (= (select a i) (select b j))))))) :named B)) (@trans (@rewrite (! (= (! (and (not (= i k3)) (and (= a (store s1 k1 v1)) (and (= b (store s2 k3 v3)) (and (= i j) (not (= (select a i) (select b j))))))) :named B) (and (not (= i k3)) (and (= a (store s1 k1 v1)) (and (= b (store s2 k3 v3)) (and (= i j) (not (= (select a i) (select b j)))))))) :strip)) (@cong (@trans (@cong (@refl (and (not (= i k3)) (and (= a (store s1 k1 v1)) (and (= b (store s2 k3 v3)) (and (= i j) (not (= (select a i) (select b j)))))))) (@cong (@trans (@cong (@refl (and (= a (store s1 k1 v1)) (and (= b (store s2 k3 v3)) (and (= i j) (not (= (select a i) (select b j))))))) (@cong (@trans (@cong (@refl (and (= b (store s2 k3 v3)) (and (= i j) (not (= (select a i) (select b j)))))) (@cong (@rewrite (! (= (and (= i j) (not (= (select a i) (select b j)))) (not (or (not (= i j)) (not (not (= (select a i) (select b j))))))) :andToOr)) (@cong (@refl (or (not (= i j)) (not (not (= (select a i) (select b j)))))) (@rewrite (! (= (not (not (= (select a i) (select b j)))) (= (select a i) (select b j))) :notSimp))))) (@rewrite (! (= (and (= b (store s2 k3 v3)) (not (or (not (= i j)) (= (select a i) (select b j))))) (not (or (not (= b (store s2 k3 v3))) (not (not (or (not (= i j)) (= (select a i) (select b j)))))))) :andToOr))) (@cong (@refl (or (not (= b (store s2 k3 v3))) (not (not (or (not (= i j)) (= (select a i) (select b j))))))) (@rewrite (! (= (not (not (or (not (= i j)) (= (select a i) (select b j))))) (or (not (= i j)) (= (select a i) (select b j)))) :notSimp))))) (@rewrite (! (= (and (= a (store s1 k1 v1)) (not (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j)))))) (not (or (not (= a (store s1 k1 v1))) (not (not (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j))))))))) :andToOr))) (@cong (@refl (or (not (= a (store s1 k1 v1))) (not (not (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j)))))))) (@rewrite (! (= (not (not (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j)))))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j))))) :notSimp))))) (@rewrite (! (= (and (not (= i k3)) (not (or (not (= a (store s1 k1 v1))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j))))))) (not (or (not (not (= i k3))) (not (not (or (not (= a (store s1 k1 v1))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j)))))))))) :andToOr))) (@cong (@refl (or (not (not (= i k3))) (not (not (or (not (= a (store s1 k1 v1))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j))))))))) (@rewrite (! (= (not (not (= i k3))) (= i k3)) :notSimp)) (@rewrite (! (= (not (not (or (not (= a (store s1 k1 v1))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j))))))) (or (not (= a (store s1 k1 v1))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j)))))) :notSimp)))))) :notOr) (not (or (not (= a (store s1 k1 v1))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j))))))) :notOr) (not (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j)))))) :notOr) (not (or (not (= i j)) (= (select a i) (select b j))))) :notOr) (not (not (= i j)))) (@rewrite (! (= (not (not (= i j))) (= i j)) :notSimp))) (@rewrite (! (= (= i j) (! (= i j) :quotedCC)) :intern))) (! (! (= i j) :quotedCC) :input B)) :pivot (! (= i j) :quotedCC))) :pivot (not (! (= j k3) :quotedCC))) (! (@clause (@mp (@split (! (@split (! (@split (! (@split (! (@mp (@asserted (! (and (not (= i k3)) (and (= a (store s1 k1 v1)) (and (= b (store s2 k3 v3)) (and (= i j) (not (= (select a i) (select b j))))))) :named B)) (@trans (@rewrite (! (= (! (and (not (= i k3)) (and (= a (store s1 k1 v1)) (and (= b (store s2 k3 v3)) (and (= i j) (not (= (select a i) (select b j))))))) :named B) (and (not (= i k3)) (and (= a (store s1 k1 v1)) (and (= b (store s2 k3 v3)) (and (= i j) (not (= (select a i) (select b j)))))))) :strip)) (@cong (@trans (@cong (@refl (and (not (= i k3)) (and (= a (store s1 k1 v1)) (and (= b (store s2 k3 v3)) (and (= i j) (not (= (select a i) (select b j)))))))) (@cong (@trans (@cong (@refl (and (= a (store s1 k1 v1)) (and (= b (store s2 k3 v3)) (and (= i j) (not (= (select a i) (select b j))))))) (@cong (@trans (@cong (@refl (and (= b (store s2 k3 v3)) (and (= i j) (not (= (select a i) (select b j)))))) (@cong (@rewrite (! (= (and (= i j) (not (= (select a i) (select b j)))) (not (or (not (= i j)) (not (not (= (select a i) (select b j))))))) :andToOr)) (@cong (@refl (or (not (= i j)) (not (not (= (select a i) (select b j)))))) (@rewrite (! (= (not (not (= (select a i) (select b j)))) (= (select a i) (select b j))) :notSimp))))) (@rewrite (! (= (and (= b (store s2 k3 v3)) (not (or (not (= i j)) (= (select a i) (select b j))))) (not (or (not (= b (store s2 k3 v3))) (not (not (or (not (= i j)) (= (select a i) (select b j)))))))) :andToOr))) (@cong (@refl (or (not (= b (store s2 k3 v3))) (not (not (or (not (= i j)) (= (select a i) (select b j))))))) (@rewrite (! (= (not (not (or (not (= i j)) (= (select a i) (select b j))))) (or (not (= i j)) (= (select a i) (select b j)))) :notSimp))))) (@rewrite (! (= (and (= a (store s1 k1 v1)) (not (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j)))))) (not (or (not (= a (store s1 k1 v1))) (not (not (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j))))))))) :andToOr))) (@cong (@refl (or (not (= a (store s1 k1 v1))) (not (not (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j)))))))) (@rewrite (! (= (not (not (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j)))))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j))))) :notSimp))))) (@rewrite (! (= (and (not (= i k3)) (not (or (not (= a (store s1 k1 v1))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j))))))) (not (or (not (not (= i k3))) (not (not (or (not (= a (store s1 k1 v1))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j)))))))))) :andToOr))) (@cong (@refl (or (not (not (= i k3))) (not (not (or (not (= a (store s1 k1 v1))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j))))))))) (@rewrite (! (= (not (not (= i k3))) (= i k3)) :notSimp)) (@rewrite (! (= (not (not (or (not (= a (store s1 k1 v1))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j))))))) (or (not (= a (store s1 k1 v1))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j)))))) :notSimp)))))) :notOr) (not (or (not (= a (store s1 k1 v1))) (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j))))))) :notOr) (not (or (not (= b (store s2 k3 v3))) (or (not (= i j)) (= (select a i) (select b j)))))) :notOr) (not (or (not (= i j)) (= (select a i) (select b j))))) :notOr) (not (= (select a i) (select b j)))) (@cong (@refl (not (= (select a i) (select b j)))) (@rewrite (! (= (= (select a i) (select b j)) (! (= (select a i) (select b j)) :quotedCC)) :intern)))) (! (not (! (= (select a i) (select b j)) :quotedCC)) :input B)) :pivot (not (! (= (select a i) (select b j)) :quotedCC))))

Simplified and structured:

(@res
	(@lemma (! (or (! (= (select a i) (select b j)) :quotedCC) (not (! (= i j) :quotedCC)) (not (! (= b (store s2 k3 v3)) :quotedCC)) (! (= j k3) :quotedCC) (! (= j k2) :quotedCC) (not (! (= s1 (store s2 k2 v2)) :quotedCC)) (! (= j k1) :quotedCC) (not (! (= a (store s1 k1 v1)) :quotedCC))) :read-over-weakeq ( ... )))
	(! (@res
		(@lemma (! (or (! (= i k1) :quotedCC) (not (! (= i j) :quotedCC)) (not (! (= j k1) :quotedCC))) :CC ( ... )))
		(! (@clause ( ... ) (! (not (! (= i k1) :quotedCC)) :input A))
		:pivot (not (! (= i k1) :quotedCC)))
		(! (@clause ( ... ) (! (! (= i j) :quotedCC) :input B))
		:pivot (! (= i j) :quotedCC)))
	:pivot (not (! (= j k1) :quotedCC)))
	(! (@clause ( ... ) (! (! (= b (store s2 k3 v3)) :quotedCC) :input B))
	:pivot (! (= b (store s2 k3 v3)) :quotedCC))
	(! (@clause ( ... ) (! (! (= a (store s1 k1 v1)) :quotedCC) :input B))
	:pivot (! (= a (store s1 k1 v1)) :quotedCC))
	(! (@res
		(@lemma (! (or (! (= i k2) :quotedCC) (not (! (= i j) :quotedCC)) (not (! (= j k2) :quotedCC))) :CC ( ... )))
		(! (@clause ( ... ) (! (not (! (= i k2) :quotedCC)) :input A))
		:pivot (not (! (= i k2) :quotedCC)))
		(! (@clause ( ... ) (! (! (= i j) :quotedCC) :input B))
		:pivot (! (= i j) :quotedCC)))
	:pivot (not (! (= j k2) :quotedCC)))
	(! (@clause ( ... ) (! (! (= s1 (store s2 k2 v2)) :quotedCC) :input A))
	:pivot (! (= s1 (store s2 k2 v2)) :quotedCC))
	(! (@clause ( ... ) (! (! (= i j) :quotedCC) :input B))
	:pivot (! (= i j) :quotedCC))
	(! (@res
		(@lemma (! (or (! (= i k3) :quotedCC) (not (! (= i j) :quotedCC)) (not (! (= j k3) :quotedCC))) :CC ( ... )))
		(! (@clause ( ... ) (! (not (! (= i k3) :quotedCC)) :input B))
		:pivot (not (! (= i k3) :quotedCC)))
		(! (@clause ( ... ) (! (! (= i j) :quotedCC) :input B))
		:pivot (! (= i j) :quotedCC)))
	:pivot (not (! (= j k3) :quotedCC)))
	(! (@clause ( ... ) (! (not (! (= (select a i) (select b j)) :quotedCC)) :input B))
	:pivot (not (! (= (select a i) (select b j)) :quotedCC))))

--------------------------------------------------------------------------------

SMT-LIB fÃ¼r die ersten 3 Beweise

(set-option :produce-interpolants true)
(set-option :print-terms-cse false)
(set-logic ALL)

(push 1)
(assert (= 0 1))
(check-sat)
(get-proof)
(pop 1)

(push 1)
(declare-fun p () Bool)
(assert p)
(assert (not p))
(check-sat)
(get-proof)
(pop 1)

(push 1)
(declare-fun a () Int)
(declare-fun b () Int)
(assert (< a b))
(assert (< b a))
(check-sat)
(get-proof)
(pop 1)

(exit)

--------------------------------------------------------------------------------

